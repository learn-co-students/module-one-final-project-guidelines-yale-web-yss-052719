#!/usr/bin/env ruby
# tco - terminal colouring application and library
# Copyright (c) 2013, 2014 Radek Pazdera

# MIT License

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'optparse'
require 'tco'

options = {:newline => true, :debug => false}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: tco [options] [TEXT]"

  opts.on("-f COLOUR", "--foreground COLOUR", "Foreground colour") do |fg|
    options[:fg] = fg
  end

  opts.on("-b COLOUR", "--background COLOUR", "Background colour") do |bg|
    options[:bg] = bg
  end

  opts.on("-B", "--bright", "Use bright/bold font") do |bright|
    options[:bright] = bright
  end

  opts.on("-u", "--underline", "Underlined text") do |underline|
    options[:underline] = underline
  end

  opts.on("-s STYLE", "--style STYLE",
          "Decorate with a preset style") do |style|
    options[:style] = style
  end

  opts.on("-n", "--no-newline",
          "Don't append \\n to the end of the string") do |newline|
    options[:newline] = false
  end

  opts.on("-d", "--display-palette",
          "Show the current colour pallete") do |display|
    options[:display] = true
  end

  desc = "Show the matching colour from the current palette for this spec"
  opts.on("-m COLOUR", "--match COLOUR", desc) do |colour|
    options[:match] = colour
  end

  opts.on("-p PALETTE", "--force-palette PALETTE",
          "Force either ansi or extended palette") do |palette|
    options[:palette] = palette
  end

  opts.on("-o", "--disable-parsing",
          "Disable the {{fg:bg text}} and",
          "{{style text}} formatting syntax") do |dp|
    options[:disable_parsing] = true
  end

  opts.on("-r", "--raw-output", "Print the output escaped") do |raw|
    options[:raw] = true
  end

  opts.on("-D", "--debug", "Run tco in debug mode") do |raw|
    options[:debug] = true
  end

  # TODO: This should output HTML (not implemented yet)
  #opts.on("-w", "--web", "Output HTML") do |html|
  #  options[:html] = html
  #end
end

begin
  parser.parse!
  config = Tco::config

  # Force palette setting
  config.options["palette"] = options[:palette] if options.has_key? :palette
  config.options["output"] = :raw if options.has_key? :raw

  Tco::reconfigure config

  if options.has_key? :display
    Tco::display_palette
    Kernel.exit! 0
  end

  if options.has_key? :match
    Tco::show_matching_colour options[:match]
    Kernel.exit! 0
  end

  if options.has_key? :style
    style = Tco::get_style options[:style]
  else
    style = Tco::Style.new
  end

  if options.has_key? :fg
    style.fg = options[:fg]
  end

  if options.has_key? :bg
    style.bg = options[:bg]
  end

  if options.has_key? :bright
    style.bright = options[:bright]
  end

  if options.has_key? :underline
    style.underline = options[:underline]
  end

  if ARGV.length > 0
    input = ARGV[0].gsub(/\\[nt]/, "\\n" => "\n", "\\t" => "\t")
  else
    input = ""
    while input_line = gets
      input << input_line.gsub(/\\[nt]/, "\\n" => "\n", "\\t" => "\t")
    end
  end

  if options.has_key? :disable_parsing
    print Tco::decorate input, style
  else
    print Tco::parse input, style
  end

  print "\n" if options[:newline] && !(input =~ /\n$/)
rescue Exception => e
  if options[:debug]
    raise e
  else
    puts e
    exit
  end
end
